/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.dfranek.wordsearch;

import java.awt.Color;
import java.awt.GridLayout;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;

/**
 *
 * @author danfr_000
 */
public class WordSearchSolver extends javax.swing.JFrame {

    private char[][] letterGrid;
    JLabel[][] gridLabels;
    List<String> words = new ArrayList<>();
    private final Map<String, List<Position>> wordCoords = new HashMap<>();

    /**
     * Creates new form MainView
     */
    public WordSearchSolver() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        gridPanel = new javax.swing.JPanel();
        wordScrollPanel = new javax.swing.JScrollPane();
        wordPanel = new javax.swing.JPanel();
        mainMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFile = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        gridPanel.setLayout(new java.awt.GridLayout(6, 0));
        jSplitPane1.setRightComponent(gridPanel);

        javax.swing.GroupLayout wordPanelLayout = new javax.swing.GroupLayout(wordPanel);
        wordPanel.setLayout(wordPanelLayout);
        wordPanelLayout.setHorizontalGroup(
            wordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        wordPanelLayout.setVerticalGroup(
            wordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 503, Short.MAX_VALUE)
        );

        wordScrollPanel.setViewportView(wordPanel);

        jSplitPane1.setLeftComponent(wordScrollPanel);

        fileMenu.setText("Datei");

        openFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFile.setText("Ã–ffnen...");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        fileMenu.add(openFile);

        mainMenu.add(fileMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        final JFileChooser fc = new JFileChooser();
        int showOpenDialog = fc.showOpenDialog(this);
        if (showOpenDialog == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            loadFile(file);
        }
    }//GEN-LAST:event_openFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new WordSearchSolver().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel gridPanel;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JPanel wordPanel;
    private javax.swing.JScrollPane wordScrollPanel;
    // End of variables declaration//GEN-END:variables

    private void loadFile(File file) {
        try {
            Stream<String> lines = Files.lines(file.toPath());
            Object[] lineArr = lines.toArray();
            boolean isGrid = true;
            List<String> grid = new ArrayList<>();
            for (Object lineO : lineArr) {
                String line = (String) lineO;
                if (line.equals("---")) {
                    isGrid = false;
                    continue;
                }

                if (isGrid) {
                    grid.add(line);
                } else {
                    words.add(line);
                }
            }

            letterGrid = new char[grid.size()][grid.get(0).length()];
            int i = 0;
            for (String gridLine : grid) {
                for (int j = 0; j < gridLine.length(); j++) {
                    letterGrid[i][j] = gridLine.charAt(j);
                }
                i++;
            }
            drawGrid();
            drawWords();
            solve();
        } catch (IOException ex) {
            Logger.getLogger(WordSearchSolver.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void drawGrid() {
        gridLabels = new JLabel[getLetterGrid().length][getLetterGrid()[0].length];
        gridPanel.setLayout(new GridLayout(getLetterGrid().length, getLetterGrid()[0].length));
        int i = 0;
        for (char[] gridLine : getLetterGrid()) {
            int j = 0;
            for (Character c : gridLine) {
                JLabel jLabel = new JLabel(c.toString());
                jLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
                jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
                gridLabels[i][j] = jLabel;
                gridPanel.add(jLabel);
                j++;
            }
            i++;
        }
        gridPanel.repaint();
        setSize(getWidth() + 1, getHeight() + 1);
    }

    private void drawWords() {
        wordPanel.setLayout(new GridLayout(words.size(), 1));

        words.stream().map((word) -> new JButton(word)).map((wordLabel) -> {
            wordLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
            wordLabel.setActionCommand(wordLabel.getText());
            wordLabel.addActionListener((java.awt.event.ActionEvent evt) -> {
                highlightWord(evt.getActionCommand());
            });
            return wordLabel;
        }).map((wordLabel) -> {
            return wordLabel;
        }).forEach((wordLabel) -> {
            wordPanel.add(wordLabel);
        });
        wordPanel.repaint();
        setSize(getWidth() + 1, getHeight() + 1);
    }

    private void highlightWord(String word) {
        for (JLabel[] l : gridLabels) {
            for (JLabel l1 : l) {
                l1.setForeground(Color.BLACK);
                l1.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK, 2));
            }
        }

        if (wordCoords.containsKey(word)) {
            List<Position> coords = wordCoords.get(word);
            if (coords.size() > 0) {
                for (Position coord : coords) {
                    gridLabels[coord.getX()][coord.getY()].setForeground(Color.red);
                    gridLabels[coord.getX()][coord.getY()].setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED, 2));
                }
            }
        }
        repaint();
    }

    private void solve() {
        words.stream().map((word) -> new WordThread(word, this)).forEach((t) -> {
            (new Thread(t)).start();
        });
    }

    /**
     * @return the letterGrid
     */
    public char[][] getLetterGrid() {
        return letterGrid;
    }

    public synchronized void addCoords(String word, List<Position> coords) {
        wordCoords.put(word, coords);
    }
}
